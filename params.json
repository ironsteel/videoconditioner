{"name":"Videoconditioner","tagline":"RGB video input for Altera DE1 board + PAL Modulator","body":"# Non-standard RGB video conditioner\r\nRGB video input for Altera DE1 board + PAL Modulator\r\n====================================================\r\nThis is an experimental video capture project. \r\nThe goal is to capture poorly modulated RGB + Sync signal as produced by an old Soviet home PC,\r\ndetect sync, massage the signal levels, insert correct sync pulses, add PAL colour modulation\r\nand output a signal that would be acceptable by a modern colour TV.\r\n\r\nВектор-06ц is the particular computer that I had in mind. Its video generation circuit is\r\ninfamous for blatant disregard of all existing video standards at once, which makes it\r\nrather difficult to connect it to modern monitors and televisions.\r\n\r\nOutline\r\n-------\r\nThe main platform is Altera DE1 FPGA board. It is fairly outdated, but it's the one that I have\r\non my bench. Going up to more modern FPGA kits is easy.\r\n\r\nA working PAL modulator that works well in my [vector06cc FPGA\r\nreplica](https://github.com/svofski/vector06cc) of the same computer already exists.\r\n\r\nTo sample RGB + Sync video signal one needs a decent speed ADC, preferrably with 4 channels,\r\nor a special video capture chip. I found nothing that would suit the job easily available.\r\nHowever, I found out about a neat trick of using LVDS input pairs available on FPGA chips\r\nto implement custom sigma-delta ADC. No need for special chips!\r\n\r\nThe basic working principles of such ADC are described in the paper called\r\n[\"Leveraging FPGA and CPLD digital logic to implement analog to digital converters\"](http://www.embedded.com/design/configurable-systems/4008891/Leveraging-FPGA-and-CPLD-digital-logic-to-implement-analog-to-digital-converters) \r\nby Ted Marena. There's also an excellent explanation and demonstration of the principle in [One Bit ADC](http://www.youtube.com/watch?v=DTCtx9eNHXE)\r\nvideo by Jeri Ellsworth.\r\n\r\nBlock diagram\r\n-------------\r\nHere's a simplified diagram of the project:\r\n\r\n![Diagram](/screenshots/diagram.png)\r\n\r\nThe video signal comprised of H+V composite sync and R, G, B signals is level-shifted to be within\r\nrange of LVDS inputs (see schematic) and is fed into the ADC. The ADC modules feed back the resulting\r\nPDM signal to the negative side of LVDS inputs, and to the input averaging filter. The recovered\r\nPCM signal is formed on the output of the filter. There are variations of input filters in the source code.\r\n\r\nThe recovered sync signal is passed to the input of sync detector module, which tries its best to \r\nrecover horizontal and vertical sync pulses. It's designed to be able to cope with bizarre sync signals\r\nproduced by bizarre computers. It does the job with variable success. Usually the problems are of electrical\r\nrather than of logical nature. For example, Вектор-06ц is known to have no equalization pulses, which\r\nresults in huge amplitude jumps during vertical sync or even simply empty lines.\r\n\r\nThe resulting sync, R, G, B signals are fed into the video generator module. It consists of sync generator\r\nand PAL modulator. The outputs are chroma, luma and mixed CVBS composite signals. They are output either\r\nusing primitive linear DAC on VGA connector of DE1 board, or using a sigma-delta modulator. The latter\r\nallows for having separate luma + chroma (S-Video) signals on the output. \r\n\r\nGenerating output\r\n-----------------\r\nS-video using a sigma-delta DAC is very simple:\r\n```\r\nreg [DAC_RESOLUTION:0] ydac;\r\nreg [DAC_RESOLUTION:0] cdac;\r\nalways @(posedge clk_out)\r\nbegin\r\n    ydac <= ydac[DAC_RESOLUTION-1:0] + tv_luma[RESOLUTION-1:RESOLUTION-DAC_RESOLUTION]; \r\n    cdac <= cdac[DAC_RESOLUTION-1:0] + tv_chroma[RESOLUTION-1:RESOLUTION-DAC_RESOLUTION]; \r\nend\r\n\r\nassign GPIO_0[10] = ydac[DAC_RESOLUTION];\r\nassign GPIO_0[11] = cdac[DAC_RESOLUTION];\r\n```\r\n\r\nLinear DAC on VGA pins of DE1 board is more interesting. The resistor DAC on DE1 allows 4 bits per channel,\r\nor just 16 levels. This is not a lot for composite analog video. Here's what a saw waveform looks like\r\nif only 4 bits are used:\r\n\r\n![4 bits DAC saw wave](/screenshots/4-bits-RGB-all-equal.jpg) \r\n\r\nHowever with a little bit of magic, [described in detail in my article here](http://sensi.org/~svo/de1videodac/),\r\nit is possible to get much higher resolution from this DAC. Here's an example:\r\n\r\n![Linearized saw wave](/screenshots/linearized.jpg)\r\n\r\nThe magic DAC is implemented using a look-up table:\r\n```\r\ndactable dactaklakpak(.address(tv_cvbs), .clock(clkpalFSC), .q(dacval));\r\nassign VGA_R = dacval[3:0];\r\nassign VGA_G = dacval[7:4];\r\nassign VGA_B = dacval[11:8];\r\n```\r\n\r\n\r\nProject files\r\n=============\r\n * [hw](hw) contains KiCad files for the DE1 addon board. Check out the [schematic](hw/videoadc.pdf).\r\n * [iverilog](iverilog) contains simulation of video signals as produced by BK-0010, and their detection\r\n * [src](src) Altera Quartus II project and synthesizable core\r\n\r\nResults\r\n=======\r\nThe input board looks like this:\r\n\r\n[![ADC](https://farm4.staticflickr.com/3851/14707757370_ebe90085c4_n.jpg)](https://www.flickr.com/photos/svofski/14707757370/)\r\n\r\n\r\nSingle channel, B&W+Sync only with BK-0010:\r\n\r\n[![BK-0010](https://farm4.staticflickr.com/3897/14770105076_e5189985cd_m.jpg)](https://www.flickr.com/photos/svofski/14770105076/)\r\n\r\nSingle channel passthrough from C64. Signal sampled and output on DE1 VGA pins without any conditioning.\r\n\r\n[![Graphics by Crest/Oxyron](https://farm4.staticflickr.com/3893/14606473808_44bb70ef14_m.jpg)](https://www.flickr.com/photos/svofski/14606473808/)\r\n\r\nRGB+Sync from Vector-06c\r\n\r\n[![Vector-06c b2m test](https://farm6.staticflickr.com/5581/14721995768_ecebc7f1ab_n.jpg)](https://www.flickr.com/photos/svofski/14721995768/)\r\n\r\n[Work log on a forum (in Russian)](http://zx-pk.ru/showthread.php?t=23833)\r\n\r\nConclusion\r\n==========\r\nThis is a research project and I never made it into a finished box with just power plug\r\nand connectors. It works, but is not perfect. The results on my monitor are acceptable.\r\nThere were some problems with PAL encoding that I could not resolve that I observed on a couple of older TV sets. \r\nThey are not related to the main focus of the project however: sampling video signals using nothing but a few LVDS pins.\r\n\r\nIt is definitely possible to capture low-spec video signals with a 10 year old FPGA using\r\nonly a few additional discrete components. The practical aspects of this\r\ndepend on the situation. Where reliability matter and source signal is known to be\r\nwithin the specifications, a dedicated chip\r\nlike TVP7002 would most likely do better. One interesting example of a project that uses TVP7002\r\nis [Grabor](http://www.rpg.fi/desaster/blog/2013/04/19/vga-framegrabbing-with-tvp7002/).\r\nBut with a such chip I would not be able to extract nonstandard \r\nvideo signal from Вектор-06ц, just like my monitor cannot do that. Where flexibility and fine control is\r\nrequired, being able to implement video decoding on the lowest possible level can be beneficial.\r\n\r\nReferences\r\n==========\r\n - [Leveraging FPGA and CPLD Digital Logic to Implement Analog To Digital Converters](/whitepapers/CreatingAnADCUsingFPGAResources.PDF) LatticeSemi Whitepaper\r\n - [Simple Sigma-Delta ADC](/whitepapers/SimpleSigmaDeltaADCDocumentation.PDF) LatticeSemi RD1066\r\n\r\n\r\n-------\r\n\r\n2014-2015 Viacheslav Slavinsky, http://sensi.org/~svo\r\n\r\n","google":"UA-3398743-2","note":"Don't delete this file! It's used internally to help with page regeneration."}